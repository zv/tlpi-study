* Chapter 29 - Thread: Introduction
  :PROPERTIES:
  :header-args: :libs -lpthread :includes <pthread.h> "/home/zv/Development/practice/linux_programming_interface/lib/tlpi_hdr.h"
  :END:

  This chapter is primarily concerned with the high-level operation of threads
  and the pthreads API (creation, joining, returning). Synchronization is
  examined in the next chapter.

** Exercises
*** 29.1
    #+BEGIN_QUOTE
    What possible outcomes might there be if a thread executes the following
    code:

    =pthread_join(pthread_self(), NULL);=

    Write a program to see what actually happens on Linux. If we have a
    variable, tid, containing a thread ID, how can a thread prevent itself from
    making a call, pthread_join(tid, NULL), that is equivalent to the above
    statement?
    #+END_QUOTE

    This chapter makes vague mention of the surprising effects that can occur
    when a thread attempts to join a thread that has already done so. You can
    prevent this by using ~pthread_equal~ to ensure that whichever thread id we
    are operating with is not our own.

**** Solution
     #+BEGIN_SRC C :results verbatim :exports both
     void *joinSelf(void *arg) {
         printf("%p\n", arg);
         int s = pthread_join(pthread_self(), NULL);
         if (s != 0) errExitEN(s, "joinSelf failed: pthread_join");
         return (void *) 1;
     }


     pthread_t t1;
     int s;

     printf("Starting Thread 1\n");
     s = pthread_create(&t1, NULL, joinSelf, (int*) 0);
     if (s != 0) errExitEN(s, "pthread_create");

     sleep(10); // ensure the thread can run before program termination
     #+END_SRC

     #+RESULTS:
     : ERROR [EDEADLK/EDEADLOCK Resource deadlock avoided] joinSelf failed: pthread_join

*** 29.2
    #+BEGIN_QUOTE
    Aside from the absence of error checking and various variable and structure
    declarations, what is the problem with the following program?
    #+END_QUOTE

    #+BEGIN_SRC c
    static void * threadFunc(void *arg) {
      struct someStruct *pbuf = (struct someStruct *) arg;
      /* Do some work with structure pointed to by 'pbuf' */
    }
    
    int main(int argc, char *argv[]) {
      struct someStruct buf;
      pthread_create(&thr, NULL, threadFunc, (void *) &buf);
      pthread_exit(NULL);
    }
    #+END_SRC

**** Solution
     Because =pthread_exit= is invoked here (as opposed to =exit= or =return=,
     which would indirectly kill thre threads), ~threadFunc~ continues to run
     with a pointer to ~buf~. This could cause a segmentation fault, incorrect
     results or be exploited by a clever hacker to dereference already freed
     memory.
 

** Notes
*** Thread Organization:
    This is a simplified figure of the organization in virtual memory of a
    threaded process. The location of per-thread stacks may be intermingled with
    shared libraries and shared memory regions, depending on the order in which
    threads are created, shared libraries loaded, and shared mmemory regios
    attached. Furthermore the locations of the per-thread stacks can vary
    depending on the Linux distribution.

    #+BEGIN_SRC ditaa :cmdline -E :file memory_organization.png
+------------+ 0xC0000000
| argv, env  | ^ Increasing Virtual Addresses
+------------+ |
| Main Stack | |
+------------+ |
|     |      | |
|     |      | |
|     v      |
|            |
+--------------+
|#1 Thread stk |
+--------------+
|#2 Thread stk |
+--------------+
|#3 Thread stk |
+--------------+
| Shared Libs  |
+--------------+ 0x40000000
|     ^      | 
|     |      | 
|     |      | 
+------------+
|   Heap     |
+------------+
|    BSS     |
+------------+
|  Program   | <- Thread #1 & #3
|   Code     | <- Main Thread
|  ( Text )  | <- Thread #2
+------------+ 0x0000
    #+END_SRC
    #+CAPTION: Memory Organization
    #+NAME: fig:memory_organization.png
    [[./memory_organization.png]]


*** Thread Attributes
    Besides global membory, threads also share a number of other attributes
    (i.e, these attibutes are global to a process, rather than specific to a
    thread) These attributes include the following:
    * process ID and parent process ID;
    * process group ID and session ID;
    * controlling terminal;
    * process credentials (user and group IDs);
    * open file descriptors;
    * record locks created using fcntl();
    * signal dispositions;
    * file system–related information: umask, current working directory, and root directory;
    * interval timers (setitimer()) and POSIX timers (timer_create());
    * System V semaphore undo (semadj) values;
    * resource limits;
    * CPU time consumed (as returned by times());
    * resources consumed (as returned by getrusage()); and
    * nice value (set by setpriority() and nice()).

    As well as a number of per-thread details:
    * thread ID;
    * signal mask;
    * thread-specific data;
    * alternate signal stack (sigaltstack());
    * the errno variable;
    * floating-point environment;
    * realtime scheduling policy and priority;
    * CPU affinity (Linux-specific);
    * capabilities (Linux-specific); and
    * stack (local variables and function call linkage information).

*** Pthreads Data Types
    The pthreads API defines a number of data types, some of which are listed
    below. Many more data-types exist, but are typically for specialized
    applications.
    | Data type           | Description                             |
    |---------------------+-----------------------------------------|
    | =pthread_t=           | Thread identifier                       |
    | =pthread_mutex_t=     | Mutex                                   |
    | =pthread_mutexattr_t= | Mutex attributes object                 |
    | =pthread_cond_t=      | Condition variable                      |
    | =pthread_condattr_t=  | Condition variable attributes object    |
    | =pthread_key_t=       | Key for thread-specific data            |
    | =pthread_once_t=      | One-time initialization control context |
    | =pthread_attr_t=      | Thread attributes object                |


*** =errno=
    Each thread is given it's own =errno= to prevent conflicts with =main='s.

*** Return Values
    In the traditional UNIX API, errno is a global integer variable. However,
    this doesn’t suffice for threaded programs. If a thread made a function call
    that returned an error in a global errno variable, then this would confuse
    other threads that might also be making function calls and checking errno.
    In other words, race conditions would result. Therefore, in threaded
    programs, each thread has its own errno value. On Linux, a thread-specific
    errno is achieved in a similar manner to most other UNIX implementations:
    errno is defined as a macro that expands into a function call returning a
    modifiable lvalue that is distinct for each thread.

*** Thread Creation

**** =pthread_create=
     #+BEGIN_SRC c
     #include <pthread.h>
     int pthread_create(pthread_t * thread, const pthread_attr_t * attr, 
                        void *(* start )(void *), void * arg );
                        // Returns 0 on success, or a positive error number on error
     #+END_SRC

     A thread can commence execution by calling ~pthread_create~ with a function
     pointer identified by ~start~. The caller will continue execution normally
     after invoking ~pthread_create~. Both the arguments and the return value of
     ~start~ are declared as ~void *~, meaning you can pass a pointer of any
     type as an argument.

     The ~pthread_t~ type is a thread identified used by pthreads to allow the
     system to keep track of the running threads and can be used later to refer
     to the thread. The attribute parameter that follows it will store various
     thread attributes discussed above.

*** Thread Termination

**** =pthread_exit=
     #+BEGIN_SRC c
     #include <pthread.h>
     void pthread_exit(void * retval);
     #+END_SRC
     
     =pthread_exit= is equivalent to calling ~return~ in the thread's ~start~
     function. It's important to remember that you *cannot* return a value that
     exists on the thread's stack! You must return either a constant or a value
     whose lifetime extends beyond that of a the thread's local storage.

*** Thread 'Joining'
**** =pthread-join=
     #+BEGIN_SRC c
     #include <pthread.h>
     int pthread_join(pthread_t thread , void ** retval);
     // Returns 0 on success, or a positive error number on error
     #+END_SRC

     This recieves a copy of a thread's return value (provided that value is not
     =NULL=). Unlike processes, any thread can join with any other thread and
     there is also no ~waitpid(-1, &status, options)~ equivalent which makes
     'joining with any thread' impossible. This, along with occassionally
     unfortunate consequences of joining a thread that has already done so,
     requires that programmer to seriously consider the program's organization.

** Examples
*** Simple Thread Creation
    #+BEGIN_SRC C :results pp :exports both
    void * threadFunc(void *arg)
    {
        char *s = (char *) arg;
        printf("%s", s);
        return (void *) strlen(s);
    }
  
    pthread_t t1;
    void *res;
    int s;
    
    s = pthread_create(&t1, NULL, threadFunc, "Hello world \n");
    if (s != 0) errExitEN(s, "pthread_create");

    printf("Message from main()\n");
    s = pthread_join(t1, &res);
    if (s != 0) errExitEN(s, "pthread_join ");
  
    printf("Thread returned %ld\n", (long) res);
    #+END_SRC 

    #+RESULTS:
    : Message from main()
    : Hello world 
    : Thread returned 13
